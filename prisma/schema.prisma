// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// model User {
//     id         String    @id @default(uuid())
//     email      String
//     password   String
//     first_name String?
//     last_name  String?
//     tel        String?
//     role       Role      @default(PERSONNEL)
//     createdAt  DateTime  @default(now())
//     updatedAt  DateTime  @updatedAt
//     Project    Project[]
// }

enum Role {
    PERSONNEL
    ADMIN
}

model Personnel {
    id           Int         @id @default(autoincrement())
    email        String
    password     String
    first_name   String?
    last_name    String?
    tel          String?
    role         Role        @default(PERSONNEL)
    address      String
    project      Project[]
    Department   Department? @relation(fields: [departmentId], references: [id])
    departmentId String?
    Owner        Owner[]
}

model Owner {
    id          Int       @id @default(autoincrement())
    project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId   String
    personnel   Personnel @relation(fields: [personnelId], references: [id], onDelete: Cascade)
    personnelId Int
}

model Department {
    id        String      @id @default(uuid())
    name      String
    personnel Personnel[]
}

model Area {
    id      String    @id @default(uuid())
    name    String
    address String
    tel     String
    project Project[]
}

model Agency {
    id                     String                   @id @default(uuid())
    name                   String
    email                  String
    tel                    String
    address                String
    Participating_agencies Participating_agencies[]
}

model Project {
    id                      String                   @id @default(uuid())
    name                    String
    detail                  String
    date_start_the_project  DateTime?
    date_end_the_project    DateTime?
    location                String?
    type                    String
    project_expenses        Int
    project_budget          Int
    project_status          ProjectStatus
    project_type            ProjectType              @relation(fields: [type], references: [id], onDelete: Cascade)
    createdAt               DateTime                 @default(now())
    updatedAt               DateTime                 @updatedAt
    Area                    Area?                    @relation(fields: [areaId], references: [id])
    areaId                  String?
    Personnel               Personnel?               @relation(fields: [personnelId], references: [id])
    personnelId             Int?
    Participating_agencies  Participating_agencies[]
    Assemble                Assemble[]
    approvalProjectFilePath String?
    supportProjectFilePath  String?
    Owner                   Owner[]
}

model Participating_agencies {
    Project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId  String
    agency     Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
    agencyId   String
    assignedAt DateTime @default(now())

    @@id([projectId, agencyId])
}

model Indicators {
    id       String     @id @default(uuid())
    name     String
    assemble Assemble[]
}

model Assemble {
    id          String     @id @default(uuid())
    name        String
    project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId   String
    indicator   Indicators @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
    indicatorId String
}

enum ProjectStatus {
    IN_PROGRESS
    COMPLETED
    PENDING
    CANCELED
    REJECT
}

model ProjectType {
    id      String    @id @default(uuid())
    name    String
    Project Project[]
}
